{"version":3,"sources":["components/ContentEdit.js","components/ContentView.js","components/Content.js","components/Note.js","components/Sidebar.js","pages/home.js","serviceWorkerRegistration.js","index.js"],"names":["ContentEdit","React","memo","_ref","note","onUpdateNote","handleViewOnUpdate","_useState","useState","_useState2","_slicedToArray","updatedNote","setUpdatedNote","onEditField","key","value","_objectSpread","_defineProperty","useEffect","_jsxs","className","children","_jsx","type","id","placeholder","title","onChange","e","target","body","onClick","updatedAt","Date","now","ContentView","length","Parser","replace","Content","activeNote","isView","setIsView","handleContentNav","document","querySelectorAll","forEach","button","classList","remove","add","querySelector","viewBox","d","Note","setActiveNote","onDeleteNote","concat","substr","toLocaleDateString","Sidebar","notes","onAddNote","sortedNotes","setSortedNotes","_useState3","_useState4","searchKeyword","setSearchKeyword","handleSearch","searchNotes","filter","toLowerCase","includes","toggle","onKeyDown","sort","a","b","map","index","Home","JSON","parse","localStorage","getItem","setNotes","setItem","stringify","_Fragment","newNote","uuid","createdAt","_toConsumableArray","noteId","find","updatedNotes","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","createRoot","getElementById","render","StrictMode","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"qNA6CeA,EA3CKC,IAAMC,MAAK,SAAAC,GAAiD,IAA9CC,EAAID,EAAJC,KAAMC,EAAYF,EAAZE,aAAcC,EAAkBH,EAAlBG,mBACpDC,EAAsCC,mBAASJ,GAAKK,EAAAC,YAAAH,EAAA,GAA7CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAE5BI,EAAc,SAACC,EAAKC,GACxBH,EAAcI,wBAAC,CAAC,EACXL,GAAW,GAAAM,YAAA,GACbH,EAAMC,IAEX,EAIA,OAFAG,qBAAU,kBAAMN,EAAeR,EAAK,GAAE,CAACA,IAGrCe,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BC,cAAA,SACEC,KAAK,OACLC,GAAG,QACHC,YAAY,gBACZV,MAAOJ,EAAYe,MACnBC,SAAU,SAACC,GAAC,OAAKf,EAAY,QAASe,EAAEC,OAAOd,MAAM,IAEvDO,cAAA,YACEE,GAAG,OACHC,YAAY,eACZV,MAAOJ,EAAYmB,KACnBH,SAAU,SAACC,GAAC,OAAKf,EAAY,OAAQe,EAAEC,OAAOd,MAAM,IAEtDO,cAAA,OACES,QAAS,WACP1B,EAAYW,wBAAC,CAAC,EACTL,GAAW,IACdqB,UAAWC,KAAKC,SAElB5B,GACF,EACAc,UAAU,WAAUC,SACrB,WAKP,I,QC/Bec,EATKlC,IAAMC,MAAK,SAAAC,GAAe,IAAZC,EAAID,EAAJC,KAChC,OACEe,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BC,cAAA,MAAAD,SAA2B,IAAtBjB,EAAKsB,MAAMU,OAAe,gBAAkBhC,EAAKsB,QACtDJ,cAAA,KAAAD,SAAIgB,YAAOjC,EAAK0B,KAAKQ,QAAQ,iBAAkB,aAGrD,ICmDeC,EAzDCtC,IAAMC,MAAK,SAAAC,GAAmC,IAAhCqC,EAAUrC,EAAVqC,WAAYnC,EAAYF,EAAZE,aACxCE,EAA4BC,oBAAS,GAAKC,EAAAC,YAAAH,EAAA,GAAnCkC,EAAMhC,EAAA,GAAEiC,EAASjC,EAAA,GAElBkC,EAAmB,SAACf,GACxBgB,SACGC,iBAAiB,oBACjBC,SAAQ,SAACC,GAAM,OAAKA,EAAOC,UAAUC,OAAO,SAAS,IAExDrB,EAAEC,OAAOmB,UAAUE,IAAI,UACvBR,EAA0B,SAAhBd,EAAEC,OAAOL,GACrB,EAWA,OAAKgB,EAcHrB,eAAA,OAAKC,UAAU,UAASC,SAAA,CACtBF,eAAA,OAAKC,UAAU,cAAaC,SAAA,CAC1BC,cAAA,OAAKE,GAAG,OAAOO,QAASY,EAAkBvB,UAAU,SAAQC,SAAC,SAG7DC,cAAA,OAAKE,GAAG,OAAOO,QAASY,EAAiBtB,SAAC,YAI3CoB,EACCnB,cAACa,EAAW,CAAC/B,KAAMoC,IAEnBlB,cAACtB,EAAW,CACVI,KAAMoC,EACNnC,aAAcA,EACdC,mBAtCmB,WACzBsC,SACGC,iBAAiB,oBACjBC,SAAQ,SAACC,GAAM,OAAKA,EAAOC,UAAUC,OAAO,SAAS,IAExDL,SAASO,cAAc,SAASH,UAAUE,IAAI,UAC9CR,GAAU,EACZ,OAIIpB,cAAA,OAAKF,UAAU,UAASC,SACtBF,eAAA,OAAKC,UAAU,oBAAmBC,SAAA,CAChCC,cAAA,OAAK8B,QAAQ,iBAAgB/B,SAC3BC,cAAA,QAAM+B,EAAE,gdAEV/B,cAAA,MAAAD,SAAI,yBA2Bd,ICvBeiC,EAlCFrD,IAAMC,MAAK,SAAAC,GAAwD,IAArDC,EAAID,EAAJC,KAAMoC,EAAUrC,EAAVqC,WAAYe,EAAapD,EAAboD,cAAeC,EAAYrD,EAAZqD,aAC1D,OACErC,eAAA,OAAKC,UAAU,OAAMC,SAAA,CACnBF,eAAA,OACEC,UAAS,gBAAAqC,OAAkBjB,IAAepC,EAAKoB,GAAK,SAAW,IAC/DO,QAAS,kBAAMwB,EAAcnD,EAAKoB,GAAG,EAACH,SAAA,CAEtCC,cAAA,MAAAD,SACyB,IAAtBjB,EAAKsB,MAAMU,OACR,gBACAhC,EAAKsB,MAAMU,OAAS,GACpBhC,EAAKsB,MAAMgC,OAAO,EAAG,IAAM,MAC3BtD,EAAKsB,QAEXJ,cAAA,KAAAD,SACGjB,EAAK0B,KAAKM,OAAS,GAChBhC,EAAK0B,KAAKQ,QAAQ,iBAAkB,KAAKoB,OAAO,EAAG,IAAM,MAC3C,KAAdtD,EAAK0B,KACL,MACA1B,EAAK0B,KAAKQ,QAAQ,iBAAkB,OAE1CnB,eAAA,OAAKC,UAAU,YAAWC,SAAA,CAAC,iBACV,IAAIY,KAAK7B,EAAK4B,WAAW2B,mBAAmB,eAG/DrC,cAAA,OAAKF,UAAU,aAAaW,QAAS,kBAAMyB,EAAapD,EAAKoB,GAAG,EAACH,SAC/DC,cAAA,OAAK8B,QAAQ,sBAAqB/B,SAChCC,cAAA,QAAM+B,EAAE,8TAKlB,ICiDeO,EAhFC3D,IAAMC,MACpB,SAAAC,GAAoE,IAAjE0D,EAAK1D,EAAL0D,MAAOrB,EAAUrC,EAAVqC,WAAYe,EAAapD,EAAboD,cAAeO,EAAS3D,EAAT2D,UAAWN,EAAYrD,EAAZqD,aAC9CjD,EAAsCC,mBAASqD,GAAMpD,EAAAC,YAAAH,EAAA,GAA9CwD,EAAWtD,EAAA,GAAEuD,EAAcvD,EAAA,GAClCwD,EAA0CzD,mBAAS,IAAG0D,EAAAxD,YAAAuD,EAAA,GAA/CE,EAAaD,EAAA,GAAEE,EAAgBF,EAAA,GAQhCG,EAAe,WACnB,IAAMC,EAAcT,EAAMU,QAAO,SAACnE,GAAI,OACpCA,EAAKsB,MAAM8C,cAAcC,SAASN,EAAcK,cAAc,IAEhER,EAAeM,EACjB,EAUA,OAFApD,qBAAU,kBAAM8C,EAAeH,EAAM,GAAE,CAACA,IAGtC1C,eAAA,OAAKC,UAAU,eAAcC,SAAA,CAC3BC,cAAA,OAAKF,UAAU,eAAcC,SAC3BF,eAAA,OAAKiC,QAAQ,sBAAsBrB,QAxBlB,WACrBa,SAASO,cAAc,YAAYH,UAAU0B,OAAO,QACpD9B,SAASO,cAAc,UAAUH,UAAU0B,OAAO,UAClD9B,SAASO,cAAc,SAASH,UAAU0B,OAAO,SACnD,EAoBiErD,SAAA,CACzDC,cAAA,QACEF,UAAU,eACViC,EAAE,sNAEJ/B,cAAA,QACEF,UAAU,OACViC,EAAE,+PAIRlC,eAAA,OAAKC,UAAU,kBAAiBC,SAAA,CAC9BF,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC7BC,cAAA,MAAAD,SAAI,UACJC,cAAA,OAAKF,UAAU,eAAeW,QAAS+B,EAAUzC,SAAC,gBAIpDF,eAAA,OAAKC,UAAU,iBAAgBC,SAAA,CAC7BC,cAAA,SACEC,KAAK,SACLC,GAAG,SACHmD,UAjCgB,SAAC/C,GACX,UAAVA,EAAEd,KACJuD,GAEJ,EA8BU1C,SAAU,SAACC,GAAC,OAAKwC,EAAiBxC,EAAEC,OAAOd,MAAM,EACjDU,YAAY,mBAEdH,cAAA,OAAKF,UAAU,aAAaW,QAASsC,EAAahD,SAChDC,cAAA,OAAK8B,QAAQ,qBAAoB/B,SAC/BC,cAAA,QAAM+B,EAAE,+cAId/B,cAAA,OAAKF,UAAU,QAAOC,SACnB0C,EACEa,MAAK,SAACC,EAAGC,GAAC,OAAKA,EAAE9C,UAAY6C,EAAE7C,SAAS,IACxC+C,KAAI,SAAC3E,EAAM4E,GAAK,OACf1D,cAACgC,EAAI,CAEHlD,KAAMA,EACNoC,WAAYA,EACZe,cAAeA,EACfC,aAAcA,GAJTwB,EAKL,WAMhB,ICxBaC,EAnDFhF,IAAMC,MAAK,WACtB,IAAAK,EAA0BC,mBACxB0E,KAAKC,MAAMC,aAAaC,QAAQ,WAAa,IAC9C5E,EAAAC,YAAAH,EAAA,GAFMsD,EAAKpD,EAAA,GAAE6E,EAAQ7E,EAAA,GAGtBwD,EAAoCzD,oBAAS,GAAM0D,EAAAxD,YAAAuD,EAAA,GAA5CzB,EAAU0B,EAAA,GAAEX,EAAaW,EAAA,GA+BhC,OAFAhD,qBAAU,kBAAMkE,aAAaG,QAAQ,QAASL,KAAKM,UAAU3B,GAAO,GAAE,CAACA,IAGrEvC,cAAAmE,WAAA,CAAApE,SACEF,eAAA,QAAAE,SAAA,CACEC,cAACsC,EAAO,CACNC,MAAOA,EACPrB,WAAYA,EACZe,cAAeA,EACfO,UApCU,WAChB,IAAM4B,EAAU,CACdlE,GAAImE,MACJjE,MAAO,GACPI,KAAM,GACN8D,UAAW3D,KAAKC,MAChBF,UAAWC,KAAKC,OAGlBoD,EAAS,GAAD7B,OAAAoC,YAAKhC,GAAK,CAAE6B,IACtB,EA2BQlC,aAjBa,SAACsC,GACpBvC,EAAcuC,IAAWtD,GAAqBA,GAC9C8C,EAASzB,EAAMU,QAAO,SAACnE,GAAI,OAAKA,EAAKoB,KAAOsE,CAAM,IACpD,IAgBMxE,cAACiB,EAAO,CAACC,WAdaqB,EAAMkC,MAAK,SAAC3F,GAAI,OAAKA,EAAKoB,KAAOgB,CAAU,IAc3BnC,aA3BvB,SAACM,GACpB,IAAMqF,EAAenC,EAAMkB,KAAI,SAAC3E,GAAI,OAClCA,EAAKoB,KAAOgB,EAAa7B,EAAcP,CAAI,IAG7CkF,EAASU,EACX,QAyBF,IC1CMC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DAqCnC,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,IAIzB,EACF,CACF,IACCW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,EAC7D,GACJ,C,MC1FaC,IAASC,WAAWhF,SAASiF,eAAe,SACpDC,OACHxG,cAACrB,IAAM8H,WAAU,CAAA1G,SACfC,cAAC2D,EAAI,ODWF,SAAkBwB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,SAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,GAAA/C,OAAMwE,SAAsB,sBAEnChC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,EAAO,CACX8B,QAAS,CAAE,iBAAkB,YAE5BzB,MAAK,SAAC0B,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAACC,GAClCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,QAClB,GACF,IAGAvC,EAAgBC,EAAOC,EAE3B,IACCgB,OAAM,WACLJ,QAAQC,IAAI,gEACd,GACJ,CAxFQyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,0GAGJ,KAGAf,EAAgBC,EAAOC,EAE3B,GACF,CACF,CCvCAuC,E","file":"static/js/main.0da19fde.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react'\n\nconst ContentEdit = React.memo(({ note, onUpdateNote, handleViewOnUpdate }) => {\n  const [updatedNote, setUpdatedNote] = useState(note)\n\n  const onEditField = (key, value) => {\n    setUpdatedNote({\n      ...updatedNote,\n      [key]: value,\n    })\n  }\n\n  useEffect(() => setUpdatedNote(note), [note])\n\n  return (\n    <div className='content-edit'>\n      <input\n        type='text'\n        id='title'\n        placeholder='Title note...'\n        value={updatedNote.title}\n        onChange={(e) => onEditField('title', e.target.value)}\n      />\n      <textarea\n        id='body'\n        placeholder='Text note...'\n        value={updatedNote.body}\n        onChange={(e) => onEditField('body', e.target.value)}\n      />\n      <div\n        onClick={() => {\n          onUpdateNote({\n            ...updatedNote,\n            updatedAt: Date.now(),\n          })\n          handleViewOnUpdate()\n        }}\n        className='btn-save'\n      >\n        Save\n      </div>\n    </div>\n  )\n})\n\nexport default ContentEdit\n","import Parser from 'html-react-parser'\nimport React from 'react'\n\nconst ContentView = React.memo(({ note }) => {\n  return (\n    <div className='content-view'>\n      <h2>{note.title.length === 0 ? 'Untitled Note' : note.title}</h2>\n      <p>{Parser(note.body.replace(/(\\r\\n|\\n|\\r)/gm, '<br>'))}</p>\n    </div>\n  )\n})\n\nexport default ContentView\n","import React, { useState } from 'react'\nimport ContentEdit from './ContentEdit'\nimport ContentView from './ContentView'\n\nconst Content = React.memo(({ activeNote, onUpdateNote }) => {\n  const [isView, setIsView] = useState(true)\n\n  const handleContentNav = (e) => {\n    document\n      .querySelectorAll('.content-nav div')\n      .forEach((button) => button.classList.remove('active'))\n\n    e.target.classList.add('active')\n    setIsView(e.target.id === 'view')\n  }\n\n  const handleViewOnUpdate = () => {\n    document\n      .querySelectorAll('.content-nav div')\n      .forEach((button) => button.classList.remove('active'))\n\n    document.querySelector('#view').classList.add('active')\n    setIsView(true)\n  }\n\n  if (!activeNote) {\n    return (\n      <div className='content'>\n        <div className='content-not-found'>\n          <svg viewBox='3 -1.597 24 24'>\n            <path d='M 10 7.403 L 20 7.403 L 20 9.403 L 10 9.403 L 10 7.403 Z M 10 11.403 L 15 11.403 L 15 13.403 L 10 13.403 L 10 11.403 Z M 24 4.403 L 24 18.403 C 24 19.506 23.103 20.403 22 20.403 L 8 20.403 C 6.897 20.403 6 19.506 6 18.403 L 6 4.403 C 6 3.3 6.897 2.403 8 2.403 L 11 2.403 L 11 0.403 L 13 0.403 L 13 2.403 L 17 2.403 L 17 0.403 L 19 0.403 L 19 2.403 L 22 2.403 C 23.103 2.403 24 3.3 24 4.403 Z M 22.002 18.403 L 22 5.403 L 8 5.403 L 8 18.403 L 22.002 18.403 Z' />\n          </svg>\n          <h2>No note selected</h2>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className='content'>\n      <div className='content-nav'>\n        <div id='view' onClick={handleContentNav} className='active'>\n          View\n        </div>\n        <div id='edit' onClick={handleContentNav}>\n          Edit\n        </div>\n      </div>\n      {isView ? (\n        <ContentView note={activeNote} />\n      ) : (\n        <ContentEdit\n          note={activeNote}\n          onUpdateNote={onUpdateNote}\n          handleViewOnUpdate={handleViewOnUpdate}\n        />\n      )}\n    </div>\n  )\n})\n\nexport default Content\n","import React from 'react'\n\nconst Note = React.memo(({ note, activeNote, setActiveNote, onDeleteNote }) => {\n  return (\n    <div className='note'>\n      <div\n        className={`note-content ${activeNote === note.id ? 'active' : ''}`}\n        onClick={() => setActiveNote(note.id)}\n      >\n        <h2>\n          {note.title.length === 0\n            ? 'Untitled Note'\n            : note.title.length > 13\n            ? note.title.substr(0, 13) + '...'\n            : note.title}\n        </h2>\n        <p>\n          {note.body.length > 39\n            ? note.body.replace(/(\\r\\n|\\n|\\r)/gm, ' ').substr(0, 39) + '...'\n            : note.body === ''\n            ? '...'\n            : note.body.replace(/(\\r\\n|\\n|\\r)/gm, ' ')}\n        </p>\n        <div className='timestamp'>\n          Last Modified {new Date(note.updatedAt).toLocaleDateString('en-US')}\n        </div>\n      </div>\n      <div className='btn-delete' onClick={() => onDeleteNote(note.id)}>\n        <svg viewBox='-0.338 -3.868 24 24'>\n          <path d='M 5.662 3.132 L 4.662 3.132 L 4.662 16.132 C 4.662 17.237 5.557 18.132 6.662 18.132 L 16.662 18.132 C 17.767 18.132 18.662 17.237 18.662 16.132 L 18.662 3.132 L 5.662 3.132 Z M 16.28 0.132 L 14.662 -1.868 L 8.662 -1.868 L 7.044 0.132 L 2.662 0.132 L 2.662 2.132 L 20.662 2.132 L 20.662 0.132 L 16.28 0.132 Z' />\n        </svg>\n      </div>\n    </div>\n  )\n})\n\nexport default Note\n","import React, { useEffect, useState } from 'react'\nimport Note from './Note'\n\nconst Sidebar = React.memo(\n  ({ notes, activeNote, setActiveNote, onAddNote, onDeleteNote }) => {\n    const [sortedNotes, setSortedNotes] = useState(notes)\n    const [searchKeyword, setSearchKeyword] = useState('')\n\n    const handleShowMenu = () => {\n      document.querySelector('.sidebar').classList.toggle('show')\n      document.querySelector('.close').classList.toggle('active')\n      document.querySelector('.open').classList.toggle('active')\n    }\n\n    const handleSearch = () => {\n      const searchNotes = notes.filter((note) =>\n        note.title.toLowerCase().includes(searchKeyword.toLowerCase())\n      )\n      setSortedNotes(searchNotes)\n    }\n\n    const handleSearchEnter = (e) => {\n      if (e.key === 'Enter') {\n        handleSearch()\n      }\n    }\n\n    useEffect(() => setSortedNotes(notes), [notes])\n\n    return (\n      <div className='sidebar show'>\n        <div className='sidebar-menu'>\n          <svg viewBox='12.953 25.838 24 24' onClick={handleShowMenu}>\n            <path\n              className='close active'\n              d='M 29.453 31.838 L 24.952 36.337 L 20.453 31.838 L 18.953 33.338 L 23.452 37.837 L 18.953 42.337 L 20.453 43.837 L 24.952 39.337 L 29.453 43.837 L 30.953 42.337 L 26.454 37.837 L 30.953 33.338 L 29.453 31.838 Z'\n            />\n            <path\n              className='open'\n              d='M 16.953 31.838 L 32.953 31.838 L 32.953 33.838 L 16.953 33.838 L 16.953 31.838 Z M 16.953 36.838 L 32.953 36.838 L 32.953 38.838 L 16.953 38.838 L 16.953 36.838 Z M 16.953 41.838 L 32.953 41.838 L 32.953 43.838 L 16.953 43.838 L 16.953 41.838 Z'\n            />\n          </svg>\n        </div>\n        <div className='sidebar-content'>\n          <div className='sidebar-header'>\n            <h1>Inote</h1>\n            <div className='btn-new-note' onClick={onAddNote}>\n              New note\n            </div>\n          </div>\n          <div className='sidebar-search'>\n            <input\n              type='search'\n              id='search'\n              onKeyDown={handleSearchEnter}\n              onChange={(e) => setSearchKeyword(e.target.value)}\n              placeholder='Search note...'\n            />\n            <div className='btn-search' onClick={handleSearch}>\n              <svg viewBox='27.843 4.443 24 24'>\n                <path d='M 38.49 23.089 C 40.264 23.089 41.988 22.494 43.387 21.401 L 47.783 25.797 L 49.197 24.383 L 44.801 19.987 C 45.894 18.589 46.489 16.864 46.49 15.089 C 46.49 10.678 42.901 7.089 38.49 7.089 C 34.079 7.089 30.49 10.678 30.49 15.089 C 30.49 19.5 34.079 23.089 38.49 23.089 Z M 38.49 9.089 C 41.799 9.089 44.49 11.78 44.49 15.089 C 44.49 18.398 41.799 21.089 38.49 21.089 C 35.181 21.089 32.49 18.398 32.49 15.089 C 32.49 11.78 35.181 9.089 38.49 9.089 Z' />\n              </svg>\n            </div>\n          </div>\n          <div className='notes'>\n            {sortedNotes\n              .sort((a, b) => b.updatedAt - a.updatedAt)\n              .map((note, index) => (\n                <Note\n                  key={index}\n                  note={note}\n                  activeNote={activeNote}\n                  setActiveNote={setActiveNote}\n                  onDeleteNote={onDeleteNote}\n                />\n              ))}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\n\nexport default Sidebar\n","import React, { useEffect, useState } from 'react'\nimport uuid from 'react-uuid'\nimport Content from '../components/Content'\nimport Sidebar from '../components/Sidebar'\n\nconst Home = React.memo(() => {\n  const [notes, setNotes] = useState(\n    JSON.parse(localStorage.getItem('notes')) || []\n  )\n  const [activeNote, setActiveNote] = useState(false)\n\n  const onAddNote = () => {\n    const newNote = {\n      id: uuid(),\n      title: '',\n      body: '',\n      createdAt: Date.now(),\n      updatedAt: Date.now(),\n    }\n\n    setNotes([...notes, newNote])\n  }\n\n  const onUpdateNote = (updatedNote) => {\n    const updatedNotes = notes.map((note) =>\n      note.id === activeNote ? updatedNote : note\n    )\n\n    setNotes(updatedNotes)\n  }\n\n  const onDeleteNote = (noteId) => {\n    setActiveNote(noteId === activeNote ? false : activeNote)\n    setNotes(notes.filter((note) => note.id !== noteId))\n  }\n\n  const getActiveNote = () => notes.find((note) => note.id === activeNote)\n\n  useEffect(() => localStorage.setItem('notes', JSON.stringify(notes)), [notes])\n\n  return (\n    <>\n      <main>\n        <Sidebar\n          notes={notes}\n          activeNote={activeNote}\n          setActiveNote={setActiveNote}\n          onAddNote={onAddNote}\n          onDeleteNote={onDeleteNote}\n        />\n        <Content activeNote={getActiveNote()} onUpdateNote={onUpdateNote} />\n      </main>\n    </>\n  )\n})\n\nexport default Home\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport Home from './pages/home'\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration'\nimport './style/index.css'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\nroot.render(\n  <React.StrictMode>\n    <Home />\n  </React.StrictMode>\n)\n\nserviceWorkerRegistration.register()\n"],"sourceRoot":""}